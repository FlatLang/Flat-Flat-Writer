package flat/writer/flat

import flat/ast
import flat/ast/visitor
import flat/compiler/models/Token
import flat/io
import flat/parser
import flat/log/Logger
import flat/eventstream/EventStream
import flat/writer

import flat/writer/WriterPatternExtensions

class extends Writer {
  static Logger log = Logger(FlatWriter.class)

  public write(
    EventStream nodeStream
  ) -> EventStream {
    let outputStream = FlatOutputStream()

    return EventStream(true).on("start", (data, stream) => {
      nodeStream.on<NodeResult>("data", (nodeResult) => {
        FlatWriter.log.traceFunc({"Received data from NodeResult EventStream: #{nodeResult}"})

        nodeResult.pattern.getWriter().write(outputStream, nodeResult.node)
      })

      nodeStream.on<String>("error", (error) => {
        FlatWriter.log.traceFunc({"Received error from NodeResult EventStream: #{error}"})
        stream.emit("error", error)
      })

      nodeStream.on("close", {
        FlatWriter.log.traceFunc({"NodeResult EventStream closed"})
        stream.emit("close")
      })
    })
  }
}
